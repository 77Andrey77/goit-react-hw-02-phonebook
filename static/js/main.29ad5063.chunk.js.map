{"version":3,"sources":["components/Form/Form.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["Form","state","name","number","nameInputId","shortid","generate","numberInputId","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","this","id","htmlFor","className","type","onChange","placeholder","Component","ContactList","contacts","onDeleteContact","map","onClick","Filter","require","App","filter","addContact","contact","find","toLowerCase","alert","onChangeFilter","visibleContacts","normalizedFilter","includes","deleteContact","contactId","prevState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29ad5063.chunk.js","sourcesContent":["import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\n\nclass Form extends Component {\n    state = {\n        name: '',\n        number: '',\n    };\n\n    nameInputId = shortid.generate();\n    numberInputId = shortid.generate();\n\n    handleChange = event => {\n        // console.log(event.currentTarget.value);\n        const { name, value } = event.currentTarget;\n\n        this.setState({\n            [name]: value,\n        });\n    };\n\n    handleSubmit = event => {\n        event.preventDefault();\n        // console.log(this.state);\n        this.props.onSubmit(this.state); // отправляем значения сабмита в пропс\n        this.setState({ name: '', number: '' }); //обнуляем форму\n    };\n\n    render() {\n        const { name, number } = this.state;\n        return (\n            <div>\n                <form id=\"contact\" onSubmit={this.handleSubmit}>\n                    <label htmlFor={this.nameInputId}>\n                        Name\n                        <input\n                            className=\"input-field\"\n                            type=\"text\"\n                            name=\"name\"\n                            value={name}\n                            onChange={this.handleChange}\n                            id={this.nameInputId}\n                            placeholder=\"John Dows\"\n                        />\n                    </label>\n                    <br />\n                    <label htmlFor={this.numberInputId}>\n                        Phone number\n                        <input\n                            className=\"input-field\"\n                            type=\"text\"\n                            name=\"number\"\n                            value={number}\n                            onChange={this.handleChange}\n                            id={this.numberInputId}\n                            placeholder=\"459-12-56\"\n                        />\n                    </label>\n\n                    <button type=\"submit\" className=\"submit-button\">\n                        Add contact\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\nForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n};\nexport default Form;\n","import PropTypes from 'prop-types';\n\nfunction ContactList({ contacts, onDeleteContact }) {\n    return (\n        <ul>\n            {contacts.map(({ id, name, number }) => (\n                <li key={id}>\n                    <p>\n                        {name}: {number}\n                    </p>\n                    <button type=\"button\" onClick={() => onDeleteContact(id)}>\n                        Delete\n                    </button>\n                </li>\n            ))}\n        </ul>\n    );\n}\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string.isRequired,\n        }).isRequired,\n    ).isRequired,\n    onDeleteContact: PropTypes.func.isRequired,\n};\nexport default ContactList;\n","import PropTypes from 'prop-types';\n\nexport default function Filter({ value, onChange }) {\n    return (\n        <label>\n            Find contacts by name\n            <input type=\"text\" value={value} onChange={onChange} />\n        </label>\n    );\n}\nFilter.propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\n\nimport Form from '../Form/Form';\nimport ContactList from '../ContactList/ContactList';\nimport Filter from '../Filter/Filter';\n\nconst shortid = require('shortid');\n\nclass App extends Component {\n    state = {\n        contacts: [\n            { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n            { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n            { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n            { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n        ],\n        filter: '',\n    };\n\n    addContact = ({ name, number }) => {\n        const contact = {\n            id: shortid.generate(),\n            name,\n            number,\n        };\n\n        if (\n            this.state.contacts.find(\n                contact => contact.name.toLowerCase() === name.toLowerCase(),\n            )\n        ) {\n            alert(`${name} is already in contacts`);\n        } else if (\n            this.state.contacts.find(contact => contact.number === number)\n        ) {\n            alert(`${number} is alread in contacts`);\n        } else {\n            //распыляет в массив\n            this.setState(({ contacts }) => ({\n                contacts: [contact, ...contacts],\n            }));\n        }\n    };\n\n    onChangeFilter = event => {\n        this.setState({ filter: event.currentTarget.value });\n    };\n\n    visibleContacts = () => {\n        const { filter, contacts } = this.state;\n        const normalizedFilter = filter.toLowerCase();\n\n        return contacts.filter(contact =>\n            contact.name.toLowerCase().includes(normalizedFilter),\n        );\n    };\n\n    //удаление контактов\n    deleteContact = contactId => {\n        this.setState(prevState => ({\n            contacts: prevState.contacts.filter(\n                contact => contact.id !== contactId,\n            ),\n        }));\n    };\n\n    render() {\n        return (\n            <div>\n                <h1>Phonebook</h1>\n                <Form onSubmit={this.addContact} />\n\n                <h2>Contacts</h2>\n                <Filter\n                    value={this.state.filter}\n                    onChange={this.onChangeFilter}\n                />\n                <ContactList\n                    contacts={this.visibleContacts()}\n                    onDeleteContact={this.deleteContact}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}